plugins {
    id 'java'
    id 'java-library'
    id 'io.qameta.allure' version '2.11.2'
}

allure {
    report {
        version.set("2.23.0")
    }
    adapter { // отвечает за появление папки build/allure-results
        aspectjWeaver.set(true) //обработка аннотации @Step
        frameworks {
            junit5 { //название фреймворка
                adapterVersion.set("2.23.0") //версия интеграции фреймворка и Allure
            }
        }
    }
}
compileTestJava {
    options.encoding = 'UTF-8'
}
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}
compileJava.options.encoding = 'UTF-8'

group 'org.example'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    testImplementation(
            'com.codeborne:selenide:6.17.0',
            "org.junit.jupiter:junit-jupiter:5.10.0",
            "org.slf4j:slf4j-simple:2.0.7",
            'io.qameta.allure:allure-selenide:2.23.0',
            "io.qameta.allure:allure-rest-assured:2.23.0",
            "com.github.javafaker:javafaker:1.0.2",
            "com.fasterxml.jackson.core:jackson-databind:2.14.2",
            "org.aeonbits.owner:owner:1.0.12",
    )
}

tasks.withType(Test) {
    systemProperties(System.getProperties())
    useJUnitPlatform()
}

task testResearch(type: Test) {
    useJUnitPlatform() {
        includeTags("Research")
    }
}
task testMenuContain(type: Test) {
    useJUnitPlatform() {
        includeTags("MenuContain")
    }
}
task testButtonsOrder(type: Test) {
    useJUnitPlatform() {
        includeTags("ButtonsOrder")
    }
}
task testWhatWeAreTesting(type: Test) {
    useJUnitPlatform() {
        includeTags("WhatWeAreTesting")
    }
}
task testThreeReasonsToWork(type: Test) {
    useJUnitPlatform() {
        includeTags("ThreeReasons")
    }
}
task testServiceCatalog(type: Test) {
    useJUnitPlatform() {
        includeTags("ServiceCatalog")
    }
}
task testHowWorking(type: Test) {
    useJUnitPlatform() {
        includeTags("HowWorking")
    }
}
task testIndustries(type: Test) {
    useJUnitPlatform() {
        includeTags("Industries")
    }
}
task testClients(type: Test) {
    useJUnitPlatform() {
        includeTags("Clients")
    }
}